#----------------------------------------------------------
# This file is part of the gitlab-arm64 project.
#
# (c) Festim Kolgeci <festim.kolgei@pm.me>
#
# For complete copyright and license details, please refer
# to the LICENSE file distributed with this source code.
#----------------------------------------------------------

name: Check for Bashunit Updates

# Ensure Proper Permissions for the Workflow Token
permissions:
  contents: write
  pull-requests: write

on:
  schedule:
    - cron: '0 0 * * 1' # Weekly check
  workflow_dispatch:

jobs:
  update-bashunit:
    runs-on: ubuntu-latest
    if: ${{ github.repository_owner == 'feskol' && github.ref == 'refs/heads/main' }} # Only on the main branch and exclude forked repositories

    steps:
      - name: Check out repository
        uses: actions/checkout@v4

      - name: Set up Git
        run: |
          git config --global user.name "github-actions[bot]"
          git config --global user.email "github-actions[bot]@users.noreply.github.com"

      - name: Get latest release from GitHub API
        id: get_latest_release
        run: |
          API_URL="https://api.github.com/repos/TypedDevs/bashunit/releases/latest"
          RELEASE_INFO=$(curl -s $API_URL)
          TAG_NAME=$(echo $RELEASE_INFO | jq -r '.tag_name')
          DOWNLOAD_URL=$(echo $RELEASE_INFO | jq -r '.assets[0].browser_download_url')
          RELEASE_NOTES=$(echo $RELEASE_INFO | jq -r '.body')
          
          echo "Latest tag: $TAG_NAME"
          echo "Download URL: $DOWNLOAD_URL"
          echo "Release Notes: $RELEASE_NOTES"
          
          echo "tag_name=$TAG_NAME" >> $GITHUB_ENV
          echo "download_url=$DOWNLOAD_URL" >> $GITHUB_ENV
          echo "release_notes=$RELEASE_NOTES" >> $GITHUB_ENV

      - name: Fetch and compare latest bashunit
        id: download_and_update
        run: |
          DOWNLOAD_URL="${{ env.download_url }}"
          LOCAL_FILE="lib/bashunit"
          TEMP_FILE="/tmp/bashunit"

          # Download the file
          curl -L -o $TEMP_FILE $DOWNLOAD_URL

          # Check if the file was downloaded successfully
          if [ ! -s $TEMP_FILE ]; then
            echo "Download failed. Exiting."
            exit 1
          fi

          # Compare the downloaded file with the local file
          if ! cmp -s $TEMP_FILE $LOCAL_FILE; then
            echo "bashunit has been updated. Preparing pull request..."
            mv $TEMP_FILE $LOCAL_FILE
            git checkout -b bashunit/update/version-${{ env.tag_name }}
            git add $LOCAL_FILE
            git commit -m "Update bashunit to version ${{ env.tag_name }}"
            git push origin HEAD
          
            echo "bashunit_updated=true" >> $GITHUB_ENV
            exit 0
          else
            echo "bashunit is already up to date."
          
            echo "bashunit_updated=false" >> $GITHUB_ENV
            exit 0
          fi

      - name: Create Pull Request
        id: cpr
        uses: peter-evans/create-pull-request@v7
        if: ${{ env.bashunit_updated == 'true' }}
        with:
          committer: "github-actions[bot] <github-actions[bot]@users.noreply.github.com>"
          branch: bashunit/update/version-${{ env.tag_name }}
          title: "Update bashunit to version ${{ env.tag_name }}"
          body: |
            Update bashunit to version [${{ env.tag_name }}](https://github.com/TypedDevs/bashunit/releases/tag/${{ env.tag_name }}).

            <details>
              <summary>Release Notes:</summary>
              ${{ env.release_notes }}
            </details>
          labels: [ "dependencies" ]
          delete-branch: true

      - name: Enable Pull Request Automerge
        if: ${{ env.bashunit_updated == 'true' }}
        uses: peter-evans/enable-pull-request-automerge@v3
        with:
          pull-request-number: ${{ steps.cpr.outputs.pull-request-number }}
          merge-method: squash
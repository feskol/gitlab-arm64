name: Build and Push Docker Image

on:
  workflow_dispatch:
    inputs:
      gitlab_release:
        description: "GitLab Release Docker-Tag (e.g., 17.6.1-ce.0 or 17.6.1-ee.0)"
        required: true
      docker_push_tags:
        description: "Additional Docker tags (comma-separated, e.g., 'beta,stable')"
        required: false
      exclude_global_tags:
        description: "Exclude broader tags like 'major.minor' (e.g. 17.6), 'major' (e.g. 17), 'edition' (e.g. ce), and 'latest'"
        required: false
        default: true

jobs:
  build-and-push:
    runs-on: ubuntu-latest
    steps:
      - name: Checkout Repository
        uses: actions/checkout@v3

      - name: docker login to docker.io
        uses: docker/login-action@v2
        if: github.repository_owner == 'feskol' && github.ref == 'refs/heads/main'
        with:
          registry: docker.io
          username: ${{ secrets.DOCKERHUB_USERNAME }}
          password: ${{ secrets.DOCKERHUB_TOKEN }}

      - name: Setup binfmt-support
        uses: docker/setup-qemu-action@v2

      - name: Setup docker buildx
        uses: docker/setup-buildx-action@v2

      - name: Define ENV variables
        id: define-variables
        run: |
          # Extract suffix (-ce or -ee)
          SUFFIX=$(echo "${{ github.event.inputs.gitlab_release }}" | sed -E 's/.*-(ce|ee).*/\1/')
          echo "GITLAB_EDITION=$SUFFIX" >> $GITHUB_ENV

      - name: Parse Tags
        id: parse-tags
        run: |
          GITLAB_RELEASE="${{ github.event.inputs.gitlab_release }}"
          
          # Extract suffix (ce or ee)
          SUFFIX="${{ env.GITLAB_EDITION }}"
          
          # Strip version-specific parts to generate base tags
          BASE_TAG=$(echo "$GITLAB_RELEASE" | sed -E "s/(\.0)?-${SUFFIX}.0$//")
          TAG_MAJOR=$(echo "$BASE_TAG" | cut -d. -f1)
          TAG_MAJOR_MINOR=$(echo "$BASE_TAG" | cut -d. -f1-2)
          TAG_MAJOR_MINOR_PATCH=$(echo "$BASE_TAG" | cut -d. -f1-3)
          
          # Define tags for new releases (only if "exclude_global_tags" is false)
          DEFAULT_NEW_TAGS=""
          if [ "${{ github.event.inputs.exclude_global_tags }}" == "false" ]; then
            
            # Define "latest" tag only if suffix is "ce"
            LATEST_TAG=""
            if [ "$SUFFIX" == "ce" ]; then
              LATEST_TAG="latest"
            fi

            DEFAULT_NEW_TAGS="$TAG_MAJOR_MINOR-$SUFFIX $TAG_MAJOR-$SUFFIX $SUFFIX $LATEST_TAG"
          fi

          # Default tags
          DEFAULT_TAGS="$GITLAB_RELEASE $TAG_MAJOR_MINOR_PATCH-$SUFFIX $DEFAULT_NEW_TAGS"

          # Append user-provided tags if any
          if [ -n "${{ github.event.inputs.docker_push_tags }}" ]; then
            ADDITIONAL_TAGS="${{ github.event.inputs.docker_push_tags }}"
          else
            ADDITIONAL_TAGS=""
          fi

          # Combine all tags, ensuring no extra spaces
          ALL_TAGS="$DEFAULT_TAGS $ADDITIONAL_TAGS"

          # Remove any extra spaces in the final tag list
          ALL_TAGS=$(echo $ALL_TAGS | xargs)
          
          # Replace spaces with comma
          ALL_TAGS=$(echo "$ALL_TAGS" | tr ' ' ',')

          echo "ALL_TAGS=$ALL_TAGS" >> $GITHUB_ENV
          echo "Parsed tags: $ALL_TAGS"

      - name: Generate Docker tags
        id: generate-tags
        run: |
          DOCKERHUB_PUSH_TAGS=$(echo ${{ env.ALL_TAGS }} | tr ',' '\n' | xargs -I {} echo "docker.io/${{ secrets.DOCKERHUB_USERNAME }}/gitlab:{}" | tr '\n' ',')
          echo "DOCKERHUB_PUSH_TAGS=${DOCKERHUB_PUSH_TAGS}" >> $GITHUB_ENV

      - name: Download GitLab Build Files
        run: |
          # Replace "-" with "+" in the release
          GITLAB_OMNIBUS_RELEASE=$(echo "${{ github.event.inputs.gitlab_release }}" | sed 's/-/+/g')
          
          mkdir -p build
          curl -sL "https://gitlab.com/gitlab-org/omnibus-gitlab/-/archive/${GITLAB_OMNIBUS_RELEASE}/omnibus-gitlab-${GITLAB_OMNIBUS_RELEASE}.tar.gz" | tar xz --strip-components=2 -C build "omnibus-gitlab-${GITLAB_OMNIBUS_RELEASE}/docker"

      - name: List contents of build directory
        run: |
          ls -R build

      - name: Create /RELEASE file
        run: |
          RELEASE_PACKAGE=gitlab-${{ env.GITLAB_EDITION }}
          RELEASE_VERSION=${{ github.event.inputs.gitlab_release }}
          
          echo "DOWNLOAD_URL_amd64=https://packages.gitlab.com/gitlab/${RELEASE_PACKAGE}/packages/ubuntu/jammy/${RELEASE_PACKAGE}_${RELEASE_VERSION}_amd64.deb/download.deb" > build/RELEASE
          echo "DOWNLOAD_URL_arm64=https://packages.gitlab.com/gitlab/${RELEASE_PACKAGE}/packages/ubuntu/jammy/${RELEASE_PACKAGE}_${RELEASE_VERSION}_arm64.deb/download.deb" >> build/RELEASE
          
          cat build/RELEASE

      - name: Build and push ARM64 image
        uses: docker/build-push-action@v3
        with:
          context: build
          # Only builds on the main branch will trigger the push, and forked repositories are excluded
          push: ${{ github.repository_owner == 'feskol' && github.ref == 'refs/heads/main' }}
          tags: ${{ env.DOCKERHUB_PUSH_TAGS }}
          platforms: linux/arm64
          # Disable provenance generation to resolve issue #82
          provenance: false
          build-args: |
            TARGETARCH=arm64
            

      - name: Clean Up
        run: |
          docker buildx rm
          rm -rf build